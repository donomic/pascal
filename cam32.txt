#include "esp_camera.h"
#include <WiFi.h>
//
// WARNING!!! Make sure that you have eitherselected ESP32 Wrover Module,
// or another board which has PSRAM enabled
//
// Select camera model
//#define CAMERA_MODEL_WROVER_KIT
//#define CAMERA_MODEL_ESP_EYE
//#define CAMERA_MODEL_M5STACK_PSRAM
//#define CAMERA_MODEL_M5STACK_WIDE#define
CAMERA_MODEL_AI_THINKER
#include "camera_pins.h"
const char* ssid = "wifi";
const char* password = "12345678";
void startCameraServer();
void setup() {
Serial.begin(115200);
Serial.setDebugOutput(true);
Serial.println();
camera_config_t config;
config.ledc_channel = LEDC_CHANNEL_0;
config.ledc_timer = LEDC_TIMER_0;
config.pin_d0 = Y2_GPIO_NUM;
config.pin_d1 = Y3_GPIO_NUM;
config.pin_d2 =Y4_GPIO_NUM; config.pin_d3
= Y5_GPIO_NUM; config.pin_d4 =
Y6_GPIO_NUM; config.pin_d5 =
Y7_GPIO_NUM; config.pin_d6 =
Y8_GPIO_NUM; config.pin_d7 =
Y9_GPIO_NUM; config.pin_xclk =
XCLK_GPIO_NUM; config.pin_pclk =
PCLK_GPIO_NUM; config.pin_vsync =
VSYNC_GPIO_NUM; config.pin_href =
HREF_GPIO_NUM; config.pin_sscb_sda =
SIOD_GPIO_NUM; config.pin_sscb_scl =
SIOC_GPIO_NUM; config.pin_pwdn =
PWDN_GPIO_NUM; config.pin_reset =
RESET_GPIO_NUM; config.xclk_freq_hz =
20000000; config.pixel_format =
PIXFORMAT_JPEG;
//init with high specsto pre-allocate larger buffers
if(psramFound()){
config.frame_size = FRAMESIZE_UXGA;
config.jpeg_quality = 10;
config.fb_count = 2;
} else {
config.frame_size = FRAMESIZE_SVGA;
config.jpeg_quality = 12;
config.fb_count = 1;
}
#if defined(CAMERA_MODEL_ESP_EYE) pinMode(13,
INPUT_PULLUP); pinMode(14, INPUT_PULLUP);
#endif //
camera init
esp_err_t err = esp_camera_init(&config);if
(err != ESP_OK) {
Serial.printf("Camera init failed with error 0x%x", err); return;
}
sensor_t * s = esp_camera_sensor_get();
//initialsensors are flipped vertically and colors are a bit saturatedif
(s->id.PID == OV3660_PID) { s->set_vflip(s,
1);//flip it back
s->set_brightness(s, 1);//up the blightness just a bits-
>set_saturation(s, -2);//lower the saturation
}
//drop down frame size for higher initial frame rates-
>set_framesize(s, FRAMESIZE_QVGA);
#if defined(CAMERA_MODEL_M5STACK_WIDE)s-
>set_vflip(s, 1);s->set_hmirror(s,
1);
#endif
WiFi.begin(ssid, password);
while (WiFi.status() != WL_CONNECTED) {
delay(500);
Serial.print(".");
}
Serial.println("");
Serial.println("WiFi connected");
startCameraServer();
Serial.print("Camera Ready! Use 'http://");
Serial.print(WiFi.localIP()); Serial.println("' to connect");
}
void loop() {
// put your main code here, to run repeatedly:
delay(10000);
}
CPP Code to display the names â€“
// Define an array of names for 2 enrolled faces const char*
face_names[2] = {"Vaibhav ","Yash"};
static int run_face_recognition(dl_matrix3du_t *image_matrix, box_array_t *net_boxes){
dl_matrix3du_t *aligned_face = NULL;
int matched_id = -1; // Initialize to -1 for no match
aligned_face = dl_matrix3du_alloc(1, FACE_WIDTH, FACE_HEIGHT, 3);
if(!aligned_face){
Serial.println("Could not allocate face recognition buffer"); return
matched_id;
}
if (align_face(net_boxes, image_matrix, aligned_face) == ESP_OK){if
(is_enrolling == 1){ int8_t left_sample_face =
enroll_face(&id_list, aligned_face);
if(left_sample_face == (ENROLL_CONFIRM_TIMES - 1)){
Serial.printf("Enrolling Face ID: %d\n", id_list.tail);
}
Serial.printf("Enrolling Face ID: %d sample %d\n", id_list.tail,
ENROLL_CONFIRM_TIMES - left_sample_face); rgb_printf(image_matrix,
FACE_COLOR_CYAN, "ID[%u] Sample[%u]",id_list.tail, ENROLL_CONFIRM_TIMES -
left_sample_face);
if (left_sample_face == 0){ is_enrolling
= 0;
Serial.printf("Enrolled Face ID: %d\n", id_list.tail);
}
} else { matched_id = recognize_face(&id_list,
aligned_face);if
(matched_id >= 0 && matched_id < 2) {
Serial.printf("Match Face ID: %u\n", matched_id);
rgb_printf(image_matrix, FACE_COLOR_GREEN, "Hello %s",
face_names[matched_id]);
} else {
Serial.println("No Match Found");
rgb_print(image_matrix, FACE_COLOR_RED, "Intruder Alert!"); matched_id
= -1;
}
}
} else {
Serial.println("Face Not Aligned");
//rgb_print(image_matrix, FACE_COLOR_YELLOW, "Human Detected");
}
dl_matrix3du_free(aligned_face); return
matched_id;
}
